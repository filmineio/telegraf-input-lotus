---
- hosts: all
  become: yes
  environment:
    LOTUS_SKIP_GENESIS_CHECK: "_yes_"

  tasks:
    # # Build lotus from source
    # - name: Install system dependencies for lotus
    #   apt:
    #     pkg:
    #       - mesa-opencl-icd
    #       - ocl-icd-opencl-dev
    #       - gcc
    #       - git
    #       - bzr
    #       - jq
    #       - pkg-config
    #       - curl
    #       - clang
    #       - build-essential
    #       - hwloc
    #       - libhwloc-dev
    #       - wget
    #     update_cache: yes

    # - name: Download Golang
    #   get_url:
    #     url: https://golang.org/dl/go1.17.1.linux-amd64.tar.gz
    #     dest: /

    # - name: Delete existing Golang installation, if exists
    #   file:
    #     state: absent
    #     path: /usr/local/go

    # - name: Unarchive the go .tar
    #   unarchive:
    #     src: /go1.17.1.linux-amd64.tar.gz
    #     dest: /usr/local
    #     remote_src: yes

    # - name: Clone Lotus
    #   git:
    #     repo: 'https://github.com/filecoin-project/lotus.git'
    #     dest: /lotus

    # - name: Build with 2k sectors
    #   make:
    #     chdir: /lotus
    #     target: 2k
    #   environment:
    #     PATH: "/usr/local/go/bin:{{ ansible_env.PATH }}"

    # # Setup & Run the lotus daemon in devnet
    # # Based on: https://docs.filecoin.io/build/local-devnet/#manual-set-up
    # - name: Grab the 2048 byte parameters
    #   shell: ./lotus fetch-params 2048
    #   args:
    #     chdir: /lotus

    # - name: Pre-seal some sectors for the genesis block
    #   shell: ./lotus-seed pre-seal --sector-size 2KiB --num-sectors 2
    #   args:
    #     chdir: /lotus

    # - name: Create the genesis block
    #   shell: ./lotus-seed genesis new localnet.json
    #   args:
    #     chdir: /lotus

    # - name: Fund the default account with some FIL
    #   shell: ./lotus-seed genesis add-miner localnet.json ~/.genesis-sectors/pre-seal-t01000.json
    #   args:
    #     chdir: /lotus

    # - name: Copy lotus systemd service file to server
    #   copy:
    #     src: ./services/lotus.service
    #     dest: /etc/systemd/system
    #     owner: root
    #     group: root

    # - name: Start lotus
    #   systemd:
    #     name: lotus
    #     state: started
    #     enabled: yes

    # - name: Import the genesis miner key
    #   shell: /lotus/lotus wallet import --as-default ~/.genesis-sectors/pre-seal-t01000.key
    #   retries: 5
    #   delay: 5
    #   register: result
    #   until: result is not failed

    # # Setup and run the lotus-miner
    # - name: Setup the genesis miner
    #   shell: /lotus/lotus-miner init --genesis-miner \
    #     --actor=t01000 \
    #     --sector-size=2KiB \
    #     --pre-sealed-sectors=~/.genesis-sectors \
    #     --pre-sealed-metadata=~/.genesis-sectors/pre-seal-t01000.json \
    #     --nosync

    # - name: Copy lotus-miner systemd service file to server
    #   copy:
    #     src: ./services/lotus-miner.service
    #     dest: /etc/systemd/system
    #     owner: root
    #     group: root

    # - name: Start lotus-miner
    #   systemd:
    #     name: lotus-miner
    #     state: started
    #     enabled: yes

    # # Build the telegraf-input-lotus external plugin
    # - name: Create input plugin directory
    #   file:
    #     state: directory
    #     path: /telegraf-input-lotus

    # - name: Copy the telegraf lotus plugin code to remote
    #   copy: src={{ item.src }} dest={{ item.dest }}
    #   with_items:
    #   - { src: '../go.mod', dest: '/telegraf-input-lotus/go.mod' }
    #   - { src: '../go.sum', dest: '/telegraf-input-lotus/go.sum' }
    #   - { src: '../Makefile', dest: '/telegraf-input-lotus/Makefile' }
    #   - { src: '../cmd', dest: '/telegraf-input-lotus/' }
    #   - { src: '../plugins', dest: '/telegraf-input-lotus/' }

    # - name: Build the telegraph lotus input plugin
    #   make:
    #     chdir: /telegraf-input-lotus
    #   environment:
    #     PATH: "/usr/local/go/bin:{{ ansible_env.PATH }}"

    # Install, configure and start InfluxDB
    - name: Import InfluxData GPG signing key
      apt_key:
        url: https://repos.influxdata.com/influxdb.key
        state: present

    - name: Add InfluxData repository
      apt_repository:
        repo: deb https://repos.influxdata.com/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable
        state: present

    - name: Install InfluxDB package
      apt:
        name: influxdb
        state: latest
        update_cache: yes

    - name: Start InfluxDB service
      systemd:
        name: influxdb
        state: started
        enabled: yes

    # Install, configure and start Telegraf Agent
    - name: Install Telegraf package
      apt:
        name: telegraf
        state: latest

    - name: Copy conf
      copy:
        src: ./conf/telegraf.conf
        dest: /etc/telegraf/telegraf.conf

    - name: Start Telegraf service
      systemd:
        name: telegraf
        state: started
        enabled: yes

    # Install, configure and start Kapacitor
    - name: Install Kapacitor package
      apt:
        name: kapacitor
        state: latest

    - name: Start Kapacitor service
      systemd:
        name: kapacitor
        state: started
        enabled: yes

    # Install, configure and start Chronograf
    - name: Download the Chronograf package 
      get_url:
        url: https://dl.influxdata.com/chronograf/releases/chronograf_1.2.0~beta5_amd64.deb
        dest: /

    - name: Check if chronograf is installed
      command: dpkg-query -W chronograf
      register: chronograf_check_deb
      failed_when: chronograf_check_deb.rc > 1
      changed_when: chronograf_check_deb.rc == 1

    - name: Install chronograf
      apt: deb="/chronograf_1.2.0~beta5_amd64.deb"
      when: chronograf_check_deb.rc == 1

    - name: Start Chronograf service
      systemd:
        name: chronograf
        state: started
        enabled: yes